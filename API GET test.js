// Generated by Selenium IDE
const { Builder, By, Key, until } = require('selenium-webdriver')
var chai = require('chai');
var assert = chai.assert;    // Using Assert style
var expect = chai.expect;    // Using Expect style
var should = chai.should();
chai.use(require('chai-json-pattern').default); // Using Should style

describe('Get users', function() {
  this.timeout(30000)
  let driver
  let vars
  beforeEach(async function() {
    driver = await new Builder()
          .withCapabilities({"browserName":"Chrome","browser_version":"81.0","os":"Windows","os_version":"10","resolution":"1024x768","build":"Selenium IDE automate test 3","project":"selenium IDE project","browserstack.debug":true,"browserstack.console":"verbose","browserstack.networkLogs":true,"name":this.currentTest.title})
          .usingServer(`https://${process.env.BROWSERSTACK_USERNAME}:${process.env.BROWSERSTACK_ACCESS_KEY}@hub-cloud.browserstack.com/wd/hub`)
          .build()
    vars = {}
  })
  afterEach(async function() {
    if (this.currentTest.state === 'passed')
          {await driver.executeScript('browserstack_executor: {"action": "setSessionStatus", "arguments": {"status":"passed"}}');}
        else
          {await driver.executeScript('browserstack_executor: {"action": "setSessionStatus", "arguments": {"status":"failed"}}');}
    await driver.quit();
  })


  it('Get user test', async function() {
    await driver.get("https://www.webtools.services/online-rest-api-client")

    //input request
    await driver.findElement(By.id("http-verb-dropdown")).click()
    {
      const dropdown = await driver.findElement(By.id("http-verb-dropdown"))
      await dropdown.findElement(By.xpath("//option[. = 'GET']")).click()
    }
    await driver.findElement(By.id("rest-url-input")).clear()
    await driver.findElement(By.id("rest-url-input")).sendKeys("https://reqres.in/api/users")

    //send request
    await driver.findElement(By.id("send-btn")).click()

    //validate response
    {
      const value = await driver.findElement(By.id("resp-status-code")).getText()
      assert.match(value, /200 OK/)
    }
    {
      const value = await driver.findElement(By.id("response-body")).getAttribute("value")
      response = JSON.parse(value)
      const pattern = `
      {
        "page": 1,
        "data": [{
          "id": 1,
          "email": String,
          ...
        },
        ...],
        ...
      }`;
      expect(response).to.matchPattern(pattern)
    }

  })


})
